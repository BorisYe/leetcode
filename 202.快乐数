编写一个算法判断一个数n是不是快乐数。

“快乐数”定义为：对于一个正整数，每一次讲该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为1.也可能是无限循环但始终变不到1.如果可以变为1，那么这个数就是快乐数。

如果n是快乐数就返回True;不是，则返回False。

示例：
    输入：19
    输出：true
    解释：
    1^2+9^2=82
    8^2+2^2=68
    6^2+8^2=100
    1^2+0^2+0^2=1
  
 题解1：  
 #include<vector>
class Solution {
int getsum(n){
    while(s)                 
        {
            t=(s%10)*(s%10)+t;      
            s=s/10;                 
        }
        return t;
}
public:
    bool isHappy(int n) {
        vector<int> v1;                 //解空间
        int t=0;                        //求和变量
        int s=n;                        //计算变量
         t=getsum(n)
            if (t==1)                   //判定是否快乐数
                return true;
            v1.push_back(t);            //解空间添加元素
            s=t;                        
            t=0;
       while(t!=1)
        {
           t=getsum(n);
            if (t==1)
                return true;
            else
               {
                    for(int i=0;i<v1.size();i++)
                    {
                        if (t==v1[i])
                        return false;
                    }
                    v1.push_back(t);
                    s=t;
                    t=0;
                }
        }
return 0;}
};


题解2：哈希表算法
class Solution {
public:
    int getsum(int n) {
    while(s)                 
        {
            t=(s%10)*(s%10)+t;      
            s=s/10;                 
        }
        return t;
    }
        return sum;
    }
    bool isHappy(int n) {
        unordered_set<int> set;
        while(1) {
            int sum = getsum(n);
            if (sum == 1) {
                return true;
            }
           
            if (set.find(sum) != set.end()) {
                return false;
            } else {
                set.insert(sum);
            }
            n = sum;
        }
    }
};

题解3：快慢指针算法
class Solution {
public:
    int getsum(int n) {
        int sum = 0;
        while(n > 0)
        {
            while(s)                 
            {
                t=(s%10)*(s%10)+t;      
                s=s/10;                 
            }
            return t;
        }
        return sum;
    }
    
    bool isHappy(int n) {
        int slow = n, fast = n;
        do{
            slow = getsum(slow);
            fast = getsum(fast);
            fast = getsum(fast);
        }while(slow != fast);
        
        return slow == 1;
    }
};
